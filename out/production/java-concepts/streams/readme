1. What is Java Stream API?
✅ Answer:
Java Stream API is used for processing collections of data in a declarative way (like functional
programming). It enables operations like map, filter, reduce, and collect in a lazy and
parallelizable manner


2. Difference Between Stream and Collection?
Feature	            Stream	                                    Collection
Nature	            Sequence of elements processed lazily	    Stores elements eagerly
Modification	    Cannot modify original data	                Can add/remove elements
Iteration	        Supports internal iteration	                Uses external iteration (e.g., for-loop)
One-time Use	    Can be consumed only once	                Can be reused multiple times


3. How do you create a Stream?
✅ Answer:
You can create a stream using:
// 1. From a List
List<String> list = Arrays.asList("A", "B", "C");
Stream<String> stream1 = list.stream();

// 2. From an Array
Stream<Integer> stream2 = Stream.of(1, 2, 3, 4, 5);

// 3. Using Stream.generate() (Infinite Stream)
Stream<Double> randomNumbers = Stream.generate(Math::random).limit(5);

// 4. Using Stream.iterate()
Stream<Integer> evenNumbers = Stream.iterate(0, n -> n + 2).limit(5);



4. How do you filter elements from a Stream?
✅ Answer:
Use .filter(Predicate<T>) to remove elements that don’t satisfy a condition.
List<Integer> numbers = Arrays.asList(10, 20, 30, 41, 51);
List<Integer> evenNumbers = numbers.stream()
                                   .filter(n -> n % 2 == 0)
                                   .collect(Collectors.toList());
System.out.println(evenNumbers); // Output: [10, 20, 30]


5. How do you sort a Stream?
✅ Answer:
Use .sorted() for natural order or .sorted(Comparator<T>) for custom sorting.

List<Integer> numbers = Arrays.asList(5, 1, 3, 8, 2);
List<Integer> sortedNumbers = numbers.stream()
                                     .sorted()
                                     .collect(Collectors.toList());
System.out.println(sortedNumbers); // Output: [1, 2, 3, 5, 8]

// Sorting in descending order
List<Integer> descSorted = numbers.stream()
                                  .sorted(Comparator.reverseOrder())
                                  .collect(Collectors.toList());
System.out.println(descSorted); // Output: [8, 5, 3, 2, 1]


6. How do you transform elements using map()?
✅ Answer:
Use .map(Function<T, R>) to transform elements.
List<String> names = Arrays.asList("alice", "bob", "charlie");
List<String> upperCaseNames = names.stream()
                                   .map(String::toUpperCase)
                                   .collect(Collectors.toList());
System.out.println(upperCaseNames); // Output: [ALICE, BOB, CHARLIE]


7. What is the difference between map() and flatMap()?
✅ Answer:
Feature	    |    map()	             |   flatMap()
Output	    |    Stream of Streams	 |   Flattened Stream
Use Case	|    One-to-One mapping	 |   One-to-Many mapping

// Using map() - results in Stream<List<String>>
List<List<String>> list = Arrays.asList(
    Arrays.asList("A", "B"),
    Arrays.asList("C", "D")
);
Stream<List<String>> mappedStream = list.stream().map(l -> l);
System.out.println(mappedStream.collect(Collectors.toList()));
// Output: [[A, B], [C, D]]

// Using flatMap() - results in Stream<String>
Stream<String> flatMappedStream = list.stream().flatMap(Collection::stream);
System.out.println(flatMappedStream.collect(Collectors.toList()));
// Output: [A, B, C, D]


8. How do you use reduce() for aggregation?
✅ Answer:
.reduce() is used for aggregation operations like sum, product, or concatenation.

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
int sum = numbers.stream().reduce(0, Integer::sum);
System.out.println(sum); // Output: 15

// Without identity element (Optional)
Optional<Integer> product = numbers.stream().reduce((a, b) -> a * b);
System.out.println(product.get()); // Output: 120


9. How do you collect elements into a Map using Collectors.toMap()?
✅ Answer:

java
Copy
Edit
List<String> names = Arrays.asList("Alice", "Bob", "Charlie");

Map<Character, String> nameMap = names.stream()
    .collect(Collectors.toMap(name -> name.charAt(0), name -> name));
System.out.println(nameMap); // Output: {A=Alice, B=Bob, C=Charlie}


10. How do you parallelize a stream?
✅ Answer:
Use parallelStream() for parallel execution.
List<Integer> numbers = IntStream.rangeClosed(1, 100).boxed().collect(Collectors.toList());

long count = numbers.parallelStream()
                    .filter(n -> n % 2 == 0)
                    .count();
System.out.println(count); // Output: 50


11. What are short-circuiting operations in Streams?
✅ Answer:
Operations that terminate early without processing all elements.
findFirst() – Returns first element.
findAny() – Returns any element (useful in parallel streams).
limit(n) – Processes only n elements.
anyMatch(), allMatch(), noneMatch() – Stop once condition is met.


12. How to handle checked exceptions in Streams?
✅ Answer:
Use try-catch inside map() or use a wrapper function.

List<String> numbers = Arrays.asList("10", "20", "abc", "30");
List<Integer> converted = numbers.stream()
    .map(n -> {
        try {
            return Integer.parseInt(n);
        } catch (NumberFormatException e) {
            return 0; // Default value
        }
    })
    .collect(Collectors.toList());
System.out.println(converted); // Output: [10, 20, 0, 30]